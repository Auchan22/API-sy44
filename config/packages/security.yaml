security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        test_users:
            memory:
                users:
                    auchan:
                      {
                          password: "1",
                          roles: ["ROLE_ADMIN"]
                      }
                    pepe:
                      {
                          password: "1234",
                          roles: ["ROLE_USER"]
                      }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            
        login:
            pattern: ^/api/login
            #Stateless significa que no usa la session, no almacena los datos de la req, por lo que en cada req, se debe mandar el token 
            stateless: true
            anonymous: true
            provider: test_users
            json_login:
                check_path: api_login # TODO: Cambiar por la ruta correcta
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator #El bundle posee un authenticator propio, pero podemos crear el propio -> https://symfony.com/bundles/LexikJWTAuthenticationBundle/current/6-extending-jwt-authenticator.html
            
        main:
            anonymous: lazy


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        
        # - { path: ^/profile, roles: ROLE_USER }
